fs = require "fs"
path = require "path"

class Trash
	constructor: (@synchronous = true) ->
		@trashDirName = ".Trash"

	Version: "0.1"

	_isDirectory: (item) -> fs.statSync(path.resolve(item)).isDirectory()
	
	_isSymlink: (item) -> fs.statSync(path.resolve(item)).isSymbolicLink()

	getTrashPath: (root = process.env['HOME']) -> path.join root, @trashDirName

	# Get the destination
	_getTrashDest: (basename) ->
		trashPath = path.join @getTrashPath(), basename
		ext = path.extname(basename)
		extless = path.basename(basename, ext)
		fileCount = 1

		while fs.existsSync trashPath
			trashPath = path.join @getTrashPath(), extless+"_"+(fileCount++)+ext
			#console.log "Trying #{trashPath}"

		trashPath

	throwAway: (item, callback=null) ->
		fullPath = path.resolve item
		trashPath = @_getTrashDest path.basename fullPath

		# console.log "Trashing #{fullPath} to #{trashPath}..."

		_cb = (err) -> callback item, err if callback?

		try
			if not @synchronous
				fs.rename fullPath, trashPath, _cb
			else
				fs.renameSync fullPath, trashPath
		catch error
			console.log error
			callback item, error

		trashPath

	_removeFile: (path, callback=null) ->
		_cb = (err) -> callback path, err if callback?

# 		console.log "Unlinking #{path}"

		try
			if not @synchronous
				fs.unlink path, _cb
			else
				fs.unlinkSync path
		catch error
			console.log error
			callback path, error if callback?
			false

		true

	_removeDirectory: (path, callback=null) ->
		_cb = (err) -> callback path, err if callback?

		try
			@emptyTrash path

			if not @synchronous
				fs.rmdir path, _cb
			else
				fs.rmdirSync path
		catch error
			console.log error
			callback path, error if callback?
			false

		true

	_removeItem: (path, callback=null) ->
		_cb = (err) -> callback path, err if callback?

		#console.log "Deleting #{path}"

		try
			if (@_isDirectory path) and not (@_isSymlink path)
				@_removeDirectory path
			else
				@_removeFile path
		catch error
			console.log error
			callback path, error if callback?
			false

		true

	emptyTrash: (start=null, callback=null) ->
		start ?= @getTrashPath()

		#console.log "Starting here: #{start}"

		if not @synchronous
			errcallback = (err, files) ->
				callback start, err if callback? and err?

				@_removeItem path.join(start, one), callback for one in files

			fs.readdir start, errcallback

		else
			@_removeItem path.join(start,one), callback for one in fs.readdirSync start


module.exports = Trash